# .plan
# [X] should automatically turn off after 3 hours
# [X] should never turn on after power outage
# [X] short press turns on immediately
# [X] press and hold:
#   [ ] if no timer set:
#     [ ] for each second held down, add 15 mins to a timer
#     [ ] blink purple X times for each 15 min interval after release
#     [X] start a timer to turn on the relay
#     [ ] blink purple 2x per second every 5s until timer goes off
#   [ ] if timer set:
#     [ ] anything greater than 1s, reset timer
#     [ ] blink 3x red
# 

substitutions:
  plug_name: coffee_machine
  # Higher value gives lower watt readout
  current_res: "0.00221"
  # Lower value gives lower voltage readout
  voltage_div: "752"
esphome:
  name: ${plug_name}
  platform: ESP8266
  board: esp8285

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: coffee_machine
    password: coffee_machine

captive_portal:


# Enable Home Assistant API
api:
  password: !secret ota_api_password

ota:
  password: !secret ota_api_password
# Enable logging
logger:
# Enable Web server
web_server:
  port: 80
  
time:
  - platform: homeassistant
    id: homeassistant_time

globals:
  - id: delay_timer_cycles
    type: int
    restore_value: no
    initial_value: '0'

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO3
      inverted: True
    name: "${plug_name}_button"
    on_click:
    - min_length: 0ms
      max_length: 999ms
      then:
        - switch.turn_on: timed_switch
        - switch.turn_off: delay_timer_switch
    - min_length: 1000ms
      max_length: 1999ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 1
    - min_length: 2000ms
      max_length: 2999ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 2
    - min_length: 3000ms
      max_length: 3999ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 3
    - min_length: 4000ms
      max_length: 4999ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 4
    - min_length: 5000ms
      max_length: 5999ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 5
    - min_length: 6000ms
      max_length: 6999ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 6
    - min_length: 7000ms
      max_length: 7999ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 7
    - min_length: 8000ms
      then:
        - globals.set:
            id: delay_timer_cycles
            value: 8
    - min_length: 1000ms
      then:
        - switch.turn_on: delay_timer_switch

switch:
- platform: template
  id: delay_timer_switch
  name: "${plug_name}_delay_timer"
  optimistic: True
  turn_on_action:
    - delay: !lambda "return id(delay_timer_cycles) * 5000;"
    - switch.turn_on: timed_switch
    - switch.turn_off: delay_timer_switch

- platform: gpio
  id: relay1
  pin: GPIO14
  internal: true
  restore_mode: ALWAYS_OFF

- platform: template
  id: timed_switch
  name: "${plug_name}_switch"
  lambda: |-
    if (id(relay1).state) {
      return true;
    } else {
      return false;
    }
  turn_on_action:
    - switch.turn_on: relay1
    - switch.turn_on: led_blue_internal
    - delay: 10800s
    - switch.turn_off: timed_switch
  turn_off_action:
    - switch.turn_off: led_blue_internal
    - switch.turn_off: relay1

- platform: gpio
  id: led_red_internal
  pin: GPIO1
  inverted: True
  internal: True
  restore_mode: ALWAYS_OFF
- platform: gpio
  id: led_blue_internal
  pin: GPIO13
  inverted: True
  internal: True
  restore_mode: ALWAYS_OFF

- platform: template
  name: "${plug_name}_LED_Blue"
  lambda: |-
    if (id(led_blue_internal).state && !id(led_red_internal).state) {
      return true;
    } else {
      return false;
    }
  turn_on_action:
    - switch.turn_off: led_red_internal
    - switch.turn_on: led_blue_internal
  turn_off_action:
    - switch.turn_off: led_blue_internal

- platform: template
  name: "${plug_name}_LED_Red"
  lambda: |-
    if (id(led_red_internal).state && !id(led_blue_internal).state) {
      return true;
    } else {
      return false;
    }
  turn_on_action:
    - switch.turn_off: led_blue_internal
    - switch.turn_on: led_red_internal
  turn_off_action:
    - switch.turn_off: led_red_internal

- platform: template
  name: "${plug_name}_LED_Purple"
  lambda: |-
    if (id(led_red_internal).state && id(led_blue_internal).state) {
      return true;
    } else {
      return false;
    }
  turn_on_action:
    - switch.turn_on: led_blue_internal
    - switch.turn_on: led_red_internal
  turn_off_action:
    - switch.turn_off: led_blue_internal
    - switch.turn_off: led_red_internal

sensor:
  - platform: template
    name: "Timer Cycles"
    lambda: |-
      return id(delay_timer_cycles);
    update_interval: 1s
    
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO04
    cf1_pin: GPIO05
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}
    current:
      name: "${plug_name}_Amperage"
      unit_of_measurement: A
    voltage:
      name: "${plug_name}_Voltage"
      unit_of_measurement: V
    power:
      name: "${plug_name}_Wattage"
      unit_of_measurement: W
      id: "${plug_name}_Wattage"
    change_mode_every: 8
    update_interval: 10s
  - platform: total_daily_energy
    name: "${plug_name}_Total Daily Energy"
    power_id: "${plug_name}_Wattage"
    filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
    unit_of_measurement: kWh
      
# Extra sensor to keep track of plug uptime
  - platform: uptime
    name: ${plug_name}_Uptime Sensor