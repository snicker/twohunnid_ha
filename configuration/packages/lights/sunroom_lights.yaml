homeassistant:
  customize:
    package.node_anchors:
      customize: &customize
        package: 'sunroom_lights'
    
    light.sunroom_lights:
      <<: *customize

    sensor.sunroom_lights_current_mode:
      <<: *customize

    sensor.sunroom_lights_last_off:
      <<: *customize

    switch.sunroom_light_night_mode:
      <<: *customize

    automation.sunroom_lights_store_last_off:
      <<: *customize

    automation.sunroom_lights_set_current_mode:
      <<: *customize

    automation.sunroom_lights_reset_mode:
      <<: *customize

mqtt:
  sensor:
    - name: "Sunroom Lights Current Mode"
      state_topic: "lighting/sunroom_lights/mode_state"
    - name: "Sunroom Lights Last Off"
      state_topic: "lighting/sunroom_lights/last_off"

switch:
  - platform: template
    switches:
      sunroom_light_night_mode:
        value_template: "{{ is_state('sensor.sunroom_lights_current_mode', 'night') and is_state('sensor.sunroom_lights','on') }}"
        turn_on:
          - service: script.sunroom_lights_activate_night_mode
        turn_off:
          - if:
              - condition: state
                entity_id: light.sunroom_lights
                state: "on"
            then:
              - service: script.sunroom_lights_activate_normal_mode

script:
  sunroom_lights_activate_night_mode:
    alias: Sunroom Lights Activate Night Mode
    sequence:
      - service: script.sunroom_lights_activate_target_mode
        data:
          target_mode: night

  sunroom_lights_activate_normal_mode:
    alias: Sunroom Lights Activate Normal Mode
    sequence:
      - service: script.sunroom_lights_activate_target_mode
        data:
          target_mode: normal

  sunroom_lights_activate_target_mode:
    alias: Sunroom Lights Activate Target Mode
    variables:
      cond1: "{{ states('light.sunroom_lights') == 'on' and states('sensor.sunroom_lights_current_mode') == 'normal' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) <= 2 }}"
      cond2: "{{ states('light.sunroom_lights') == 'on' and states('sensor.sunroom_lights_current_mode') == 'normal' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) > 2 }}"
      cond3: "{{ states('light.sunroom_lights') == 'off' and states('sensor.sunroom_lights_current_mode') == 'normal' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) <= 2 }}"
      cond4: "{{ states('light.sunroom_lights') == 'off' and states('sensor.sunroom_lights_current_mode') == 'normal' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) > 2 }}"
      cond5: "{{ states('light.sunroom_lights') == 'on' and states('sensor.sunroom_lights_current_mode') == 'night' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) <= 2 }}"
      cond6: "{{ states('light.sunroom_lights') == 'on' and states('sensor.sunroom_lights_current_mode') == 'night' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) > 2 }}"
      cond7: "{{ states('light.sunroom_lights') == 'off' and states('sensor.sunroom_lights_current_mode') == 'night' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) <= 2 }}"
      cond8: "{{ states('light.sunroom_lights') == 'off' and states('sensor.sunroom_lights_current_mode') == 'night' and (as_timestamp(now()) - states('sensor.sunroom_lights_last_off')|float)|round(3) > 2 }}"
    sequence:
      - if:
          - condition: template
            value_template: "{{ target_mode in ('normal','night') and (cond3 or cond4 or cond7 or cond8) }}"
        then:
          - service: light.turn_on
            target:
              entity_id: light.sunroom_lights
          - delay:
              hours: 0
              minutes: 0
              seconds: 1
              milliseconds: 500
      - if:
          - condition: template
            value_template: "{{ (target_mode == 'night' and (cond1 or cond2 or cond4 or cond7 or cond8)) or (target_mode == 'normal' and (cond3 or cond5 or cond6)) }}"
        then:
          - service: light.turn_off
            target:
              entity_id: light.sunroom_lights
          - delay:
              hours: 0
              minutes: 0
              seconds: 1
              milliseconds: 500
          - service: light.turn_on
            target:
              entity_id: light.sunroom_lights
          - delay:
              hours: 0
              minutes: 0
              seconds: 1
              milliseconds: 500

automation:
  - id: sunroom_lights_store_last_off
    alias: sunroom_lights_store_last_off
    mode: single
    trigger:
      - platform: state
        entity_id:
          - light.sunroom_lights
        to: "off"
    condition: []
    action:
      - service: mqtt.publish
        data:
          topic: lighting/sunroom_lights/last_off
          qos: 0
          retain: false
          payload_template: "{{ as_timestamp(now()) }}"

  - id: sunroom_lights_set_current_mode
    alias: sunroom_lights_set_current_mode
    mode: single
    trigger:
      - platform: state
        entity_id:
          - light.sunroom_lights
        to: "on"
    condition:
      - condition: template
        value_template: |-
          {% set sensor_value = states('sensor.sunroom_lights_last_off') | float %}
          {{ (as_timestamp(now()) - sensor_value)|round(3) <= 2 }}
    action:
      - service: mqtt.publish
        data:
          topic: lighting/sunroom_lights/mode_state
          qos: 0
          retain: false
          payload_template: >
            {% set current_state = states('sensor.sunroom_lights_current_mode') %}
            {% if current_state == 'night' %}normal{% else %}night{% endif %}

  - id: sunroom_lights_reset_mode
    alias: sunroom_lights_reset_mode
    mode: single
    trigger:
      - platform: state
        entity_id:
          - light.sunroom_lights
        to: "off"
        for:
          hours: 0
          minutes: 0
          seconds: 8
    condition: []
    action:
      - service: mqtt.publish
        data:
          topic: lighting/sunroom_lights/mode_state
          payload: normal
          retain: true
  



        